package grafosxml;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import com.mxgraph.model.mxCell;
import com.mxgraph.swing.mxGraphComponent;
import com.mxgraph.util.mxConstants;
import com.mxgraph.view.mxGraph;
import com.mxgraph.view.mxStylesheet;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class GrafoView extends javax.swing.JFrame {

    Grafo grafo;

    List<No> listaNos = new ArrayList<No>();
    List<Aresta> listaArestas = new ArrayList<Aresta>();
    String nomeAresta;
    String origemAresta;
    String destinoAresta;

    protected static mxGraph graph = new mxGraph();
    protected static HashMap m = new HashMap();
    private mxGraphComponent graphComponent;
    //private JTextField texto;
    //private JButton botaoAdd;
    //private JButton botaoDel;
    //private JButton botaoLigar;
    private mxCell cell = null;

    public static HashMap getM() {
        return m;
    }

    public static mxGraph getGraph() {
        return graph;
    }

    Object parent;

    /**
     * Creates new form ViewHome
     */
    public GrafoView() {
        initComponents();
        setLocationRelativeTo(null); // deixa a janela no centro da tela

        parent = graph.getDefaultParent();
        graphComponent = new mxGraphComponent(graph);

        graphComponent.setPreferredSize(new Dimension(10, 10));
        graphComponent.setBackground(Color.WHITE);
        graphComponent.setComponentPopupMenu(popupMenu);
        jPanel1.add(graphComponent);

        graphComponent.getGraphControl().addMouseListener(new MouseAdapter() {
            public void mouseReleased(MouseEvent e) {
                cell = (mxCell) graphComponent.getCellAt(e.getX(), e.getY());
                /*
                if (cell != null) {
                    JOptionPane.showMessageDialog(null, "Vértice: "+((mxCell)cell).getValue());
                }*/
            }
        });
        getContentPane().setBackground(Color.white);

        graphComponent.validate();
        graphComponent.repaint();
        jPanel1.validate();
        jPanel1.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        popupMenu = new javax.swing.JPopupMenu();
        Remover = new javax.swing.JMenuItem();
        abc = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jButtonLimparTela = new javax.swing.JButton();
        jBAbrirGrafo = new javax.swing.JButton();
        jTNomeGrafo = new javax.swing.JTextField();
        jBFechar = new javax.swing.JButton();
        jButtonAddVertice = new javax.swing.JButton();
        jButtonRemoveVertice = new javax.swing.JButton();
        jButtonAddAresta = new javax.swing.JButton();
        jButtonRemoveAresta = new javax.swing.JButton();
        jButtonSalvar = new javax.swing.JButton();
        jButtonVisualizar = new javax.swing.JButton();

        Remover.setText("Remover");
        Remover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoverActionPerformed(evt);
            }
        });
        popupMenu.add(Remover);

        abc.setText("Cor");
        popupMenu.add(abc);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(153, 204, 255));
        jPanel1.setComponentPopupMenu(popupMenu);
        jPanel1.setPreferredSize(new java.awt.Dimension(400, 10));

        jButtonLimparTela.setText("Limpar Tela");
        jButtonLimparTela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLimparTelaActionPerformed(evt);
            }
        });

        jBAbrirGrafo.setText("Abrir Grafo");
        jBAbrirGrafo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAbrirGrafoActionPerformed(evt);
            }
        });

        jTNomeGrafo.setEnabled(false);

        jBFechar.setText("Fechar");
        jBFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBFecharActionPerformed(evt);
            }
        });

        jButtonAddVertice.setText("Adicionar Nó");
        jButtonAddVertice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddVerticeActionPerformed(evt);
            }
        });

        jButtonRemoveVertice.setText("Remover Nó");
        jButtonRemoveVertice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveVerticeActionPerformed(evt);
            }
        });

        jButtonAddAresta.setText("Adicionar Aresta");
        jButtonAddAresta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddArestaActionPerformed(evt);
            }
        });

        jButtonRemoveAresta.setText("Remover Aresta");
        jButtonRemoveAresta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveArestaActionPerformed(evt);
            }
        });

        jButtonSalvar.setText("Salvar Grafo");
        jButtonSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarActionPerformed(evt);
            }
        });

        jButtonVisualizar.setText("Visualizar Grafo");
        jButtonVisualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 577, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBAbrirGrafo)
                        .addGap(18, 18, 18)
                        .addComponent(jTNomeGrafo, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jButtonVisualizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonSalvar)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonLimparTela))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonAddVertice)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonRemoveVertice)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAddAresta)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonRemoveAresta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBFechar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBAbrirGrafo)
                    .addComponent(jTNomeGrafo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonLimparTela)
                    .addComponent(jButtonSalvar)
                    .addComponent(jButtonVisualizar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBFechar)
                    .addComponent(jButtonAddVertice)
                    .addComponent(jButtonRemoveVertice)
                    .addComponent(jButtonAddAresta)
                    .addComponent(jButtonRemoveAresta))
                .addGap(70, 70, 70))
        );

        setSize(new java.awt.Dimension(593, 492));
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    private void jButtonLimparTelaActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        //Object[] vertices = graphComponent.getCells(new Rectangle(0, 0, graphComponent.getWidth(), graphComponent.getHeight()));

        graph.removeCells(graphComponent.getCells(new Rectangle(0, 0, graphComponent.getWidth(), graphComponent.getHeight())));
    }                                                 

    private void RemoverActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
    }                                       

    private void formWindowOpened(java.awt.event.WindowEvent evt) {                                  

        graphComponent.setPreferredSize(new Dimension(jPanel1.getWidth() - 10, jPanel1.getHeight() - 10));

        graphComponent.validate();
        graphComponent.repaint();
        jPanel1.validate();
        jPanel1.repaint();
    }                                 

    private void formComponentResized(java.awt.event.ComponentEvent evt) {                                      
        formWindowOpened(null);
    }                                     

    private void jBAbrirGrafoActionPerformed(java.awt.event.ActionEvent evt) {                                             
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(this);
        File xmlFileLer = new File(fileChooser.getSelectedFile().getName());
        jTNomeGrafo.setText(fileChooser.getSelectedFile().getName().substring(0, fileChooser.getSelectedFile().getName().lastIndexOf(".")));

        XStream xstream = new XStream(new DomDriver());
        xstream.processAnnotations(Grafo.class);
        grafo = (Grafo) xstream.fromXML(xmlFileLer);
        grafo.geraMatriz();
        String xml = xstream.toXML(grafo);
        System.out.println(xml);

        listaNos.clear();
        listaArestas.clear();

        for (No n : grafo.getNos()) {
            listaNos.add(n);
        }

        for (Aresta a : grafo.getArestas()) {
            listaArestas.add(a);
        }
    }                                            

    private void jBFecharActionPerformed(java.awt.event.ActionEvent evt) {                                         
        graph.removeCells(graphComponent.getCells(new Rectangle(0, 0, graphComponent.getWidth(), graphComponent.getHeight())));
        setVisible(false);
    }                                        

    private void jButtonAddVerticeActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        graph.getModel().beginUpdate();
        String nome = "";
        try {
            nome = JOptionPane.showInputDialog("Nome do vértice");

            mxStylesheet stylesheet = GrafoView.getGraph().getStylesheet();
            Hashtable<String, Object> style = new Hashtable();
            style.put(mxConstants.STYLE_SHAPE, "ellipse");
            style.put(mxConstants.STYLE_OPACITY, 50);
            style.put(mxConstants.STYLE_FONTCOLOR, "#774400");
            style.put(mxConstants.STYLE_FILLCOLOR, Color.LIGHT_GRAY);
            stylesheet.putCellStyle("ROUNDED", style);
            mxCell v1 = (mxCell) GrafoView.getGraph().insertVertex(parent, null, nome, 450, 250, 50, 50, "ROUNDED");
            v1.setValue(nome);
            GrafoView.getM().put(nome, v1);
        } finally {
            graph.getModel().endUpdate();
        }

        listaNos.add(new No(nome));
    }                                                 

    private void jButtonRemoveVerticeActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        graph.getModel().remove(cell);
        for(Aresta are : listaArestas){
            if(are.getOrigem().equals((String) cell.getValue()) || are.getDestino().equals((String) cell.getValue())){
                listaArestas.remove(are);
            }
        }
        listaNos.remove(new No((String) cell.getValue()));
        cell = null;
    }                                                    

    private void jButtonAddArestaActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        /*
         String vo = JOptionPane.showInputDialog("Vértice  de Origem");
         String vd = JOptionPane.showInputDialog("Vértice  de Destino");
         String nome = JOptionPane.showInputDialog("Nome da Aresta");
         int valor = Integer.parseInt(JOptionPane.showInputDialog("Valor da Aresta"));
 
         Object parent1 = GrafoView.getGraph().getDefaultParent();
         Object v1 = GrafoView.getM().get(vo);
         Object v2 = GrafoView.getM().get(vd);
 
         mxCell a1 = (mxCell) GrafoView.getGraph().insertEdge(parent1, null, nome, v1, v2);
         a1.setValue(nome);
         listaArestas.add(new Aresta(nome, valor, vo, vd));*/
        
        String v1 = JOptionPane.showInputDialog("Vértice  de Origem");
        String v2 = JOptionPane.showInputDialog("Vértice  de Destino");
        String nome = JOptionPane.showInputDialog("Nome da Aresta");
        int valor = Integer.parseInt(JOptionPane.showInputDialog("Valor da Aresta"));

        Object[] vertices = graphComponent.getCells(new Rectangle(0, 0, graphComponent.getWidth(), graphComponent.getHeight()));
        mxCell vo = null, vf = null;
        for (Object o : vertices) {
            mxCell v = (mxCell) o;
            if (v1.equals(v.getValue().toString())) {
                vo = (v);
            }
            if (v2.equals(v.getValue().toString())) {
                vf = (v);
            }
            if (vo != null && vf != null) {
                break;
            }
        }
        graph.getModel().beginUpdate();
        try {
            mxStylesheet stylesheet = this.graph.getStylesheet();
            Hashtable<String, Object> style = new Hashtable();
            graph.insertEdge(parent, Integer.toString(valor), nome, (Object) vo, (Object) vf, "aresta");
        } finally {
            graph.getModel().endUpdate();
        }

        String o = vo.getValue().toString();
        String d = vf.getValue().toString();
        listaArestas.add(new Aresta(nome, valor, o, d));
    }                                                

    private void jButtonRemoveArestaActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        graph.getModel().remove(cell);
        for(Aresta are : listaArestas){
            if(are.getNomeAresta().equals((String) cell.getValue())){
                listaArestas.remove(are);
                break;
            }
        }
        cell = null;
    }                                                   

    private void jButtonSalvarActionPerformed(java.awt.event.ActionEvent evt) {                                              
        XStream xstream = new XStream(new DomDriver());
        xstream.processAnnotations(Grafo.class);
        Grafo g = new Grafo(grafo.getId(), grafo.getTipo(), listaNos, listaArestas);
        System.out.println(xstream.toXML(g));
        String xml = xstream.toXML(g);
        g = null;
        g = (Grafo) xstream.fromXML(xml);
        try {
            File xmlFile = new File(jTNomeGrafo.getText() + ".xml");
            xstream.toXML(g, new FileWriter(xmlFile));
        } catch (IOException ex) {
            System.out.println("Erro ao Gravar Arquivo");
        }
        graph.removeCells(graphComponent.getCells(new Rectangle(0, 0, graphComponent.getWidth(), graphComponent.getHeight())));//LIMPA A TELA DEPOIS DE SALVAR
        listaArestas.clear();
        listaNos.clear();
        grafo = null;
        jTNomeGrafo.setText("");
        JOptionPane.showMessageDialog(null, "Dados Salvos com Sucesso");
    }  